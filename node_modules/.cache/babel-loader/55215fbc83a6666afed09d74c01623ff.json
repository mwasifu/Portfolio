{"ast":null,"code":"var _jsxFileName = \"/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\n\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n  const [weatherData, setWeatherData] = useState([{}]);\n  const [city, setCity] = useState(\"\");\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  });\n\n  const success = location => {\n    setLocation({\n      lat: location.coords.latitude,\n      lng: location.coords.longitude\n    });\n    console.log(location);\n  };\n\n  const failed = error => {\n    setLocation({\n      loaded: true,\n      error\n    });\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      failed({\n        code: 0,\n        message: \"Geolocation not supported\"\n      });\n    }\n  }, []);\n  navigator.geolocation.getCurrentPosition(success, failed);\n  console.log(navigator.geolocation.getCurrentPosition(success, failed)); //   api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n\n  const getWeather = e => {\n    if (e.key === \"Enter\") {\n      fetch(`api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${apiKey}`).then(response => response.json()).then(data => setWeatherData(data));\n      console.log(weatherData);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    s: 1,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"How's the weather?\"), /*#__PURE__*/React.createElement(FloatingLabel, {\n    controlId: \"floatingInput\",\n    label: \"Enter City Name\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    onKeyPress: getWeather,\n    onChange: e => {\n      setCity(e.target.value);\n      console.log(\"City: \" + {\n        city\n      });\n    },\n    value: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }))))))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx"],"names":["React","useEffect","useState","Row","Col","Card","Button","FloatingLabel","Form","Weather","apiKey","weatherData","setWeatherData","city","setCity","location","setLocation","loaded","coordinates","lat","lng","success","coords","latitude","longitude","console","log","failed","error","navigator","code","message","geolocation","getCurrentPosition","getWeather","e","key","fetch","then","response","json","data","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\n\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n  const [weatherData, setWeatherData] = useState([{}]);\n  const [city, setCity] = useState(\"\");\n\n    const [location, setLocation] = useState({\n        loaded: false,\n        coordinates: { lat: \"\", lng: \"\"}\n    })\n\n    const success = location => {\n        setLocation({ lat: location.coords.latitude, lng: location.coords.longitude})\n        console.log(location);\n    }\n\n    const failed = error => {\n        setLocation({\n            loaded: true,\n            error,\n        })\n    }\n\n    useEffect(() => {\n        if (!(\"geolocation\" in navigator)){\n            failed({\n                code: 0,\n                message: \"Geolocation not supported\"\n            })\n                \n            }\n        \n    }, []);\n\n    navigator.geolocation.getCurrentPosition(success, failed);\nconsole.log(navigator.geolocation.getCurrentPosition(success, failed));\n//   api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n  const getWeather = (e) => {\n\n    if (e.key === \"Enter\") {\n      fetch(`api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${apiKey}`)\n        .then((response) => response.json())\n        .then((data) => setWeatherData(data));\n        console.log(weatherData);\n    }\n  };\n  return (\n    <div>\n      <Row s={1} md={2}>\n        <Col>\n          <Card style={{}}>\n            <Card.Body>\n              <Col>\n                <Card.Title>How's the weather?</Card.Title>\n                <FloatingLabel\n                  controlId=\"floatingInput\"\n                  label=\"Enter City Name\"\n                  className=\"mb-3\"\n                >\n                  <Form.Control\n                    type=\"text\"\n                    \n                    onKeyPress={getWeather}\n                    onChange={(e) => {\n                      setCity(e.target.value);\n                      console.log(\"City: \" + { city });\n                    }}\n                    value={city}\n                  />\n                </FloatingLabel>\n              </Col>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}