{"ast":null,"code":"var _jsxFileName = \"/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n  const [city, setCity] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const [high, setHigh] = useState(\"\");\n  const [low, setLow] = useState(\"\");\n  const [feel, setFeel] = useState(\"\");\n  const [location, setLocation] = useState({\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  });\n\n  const success = location => {\n    // setLocation({\n    //     loaded: true,\n    //     lat: location.coords.latitude, lng: location.coords.longitude})\n    console.log(location);\n    axios({\n      method: \"GET\",\n      url: `http://api.openweathermap.org/data/2.5/weather?lat=${location.coords.latitude}&lon=${location.coords.longitude}&units=imperial&appid=${apiKey}`\n    }).then(response => {\n      const cityX = response.data.name;\n      setCity(cityX);\n      const tempX = response.data.main.temp;\n      setTemperature(tempX + \" F\");\n      const highX = response.data.main.temp_max;\n      setHigh(highX + \" F\");\n      const lowX = response.data.main.temp_min;\n      setLow(lowX + \" F\");\n      const feelX = response.data.main.feels_like;\n      setLow(feelX + \" F\");\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"from \" + city);\n  }, [city]);\n\n  const failed = error => {\n    setLocation({\n      loaded: true,\n      error\n    });\n    console.log(\"reached failure\");\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      failed({\n        code: 0,\n        message: \"Geolocation not supported\"\n      });\n    }\n  }, []); //\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    s: 1,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"How's the weather?\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => navigator.geolocation.getCurrentPosition(success, failed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Check\"), /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, city), /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, temperature), /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, high), /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, low), /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, feel)))))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx"],"names":["React","useEffect","useState","Row","Col","Card","Button","FloatingLabel","Form","axios","Weather","apiKey","city","setCity","temperature","setTemperature","high","setHigh","low","setLow","feel","setFeel","location","setLocation","coordinates","lat","lng","success","console","log","method","url","coords","latitude","longitude","then","response","cityX","data","name","tempX","main","temp","highX","temp_max","lowX","temp_min","feelX","feels_like","catch","error","failed","loaded","navigator","code","message","geolocation","getCurrentPosition"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\nimport axios from \"axios\";\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n\n  const [city, setCity] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const [high, setHigh] = useState(\"\");\n  const [low, setLow] = useState(\"\");\n  const [feel, setFeel] = useState(\"\");\n  const [location, setLocation] = useState({\n    coordinates: { lat: \"\", lng: \"\" },\n  });\n\n  const success = (location) => {\n    // setLocation({\n    //     loaded: true,\n    //     lat: location.coords.latitude, lng: location.coords.longitude})\n    console.log(location);\n    axios({\n      method: \"GET\",\n      url: `http://api.openweathermap.org/data/2.5/weather?lat=${location.coords.latitude}&lon=${location.coords.longitude}&units=imperial&appid=${apiKey}`,\n    })\n      .then((response) => {\n        const cityX = response.data.name;\n        setCity(cityX);\n        const tempX = response.data.main.temp;\n        setTemperature(tempX + \" F\");\n        const highX = response.data.main.temp_max;\n        setHigh(highX + \" F\");\n        const lowX = response.data.main.temp_min;\n        setLow(lowX + \" F\");\n        const feelX = response.data.main.feels_like;\n        setLow(feelX + \" F\");\n        console.log(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  useEffect(() => {\n    console.log(\"from \" + city);\n  }, [city]);\n\n  const failed = (error) => {\n    setLocation({\n      loaded: true,\n      error,\n    });\n    console.log(\"reached failure\");\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      failed({\n        code: 0,\n        message: \"Geolocation not supported\",\n      });\n    }\n  }, []);\n\n  //\n\n  return (\n    <div>\n      <Row s={1} md={2}>\n        <Col>\n          <Card style={{}}>\n            <Card.Body>\n              <Col>\n                <Card.Title>How's the weather?</Card.Title>\n                <Button\n                  onClick={() =>\n                    navigator.geolocation.getCurrentPosition(success, failed)\n                  }\n                >\n                  Check\n                </Button>\n                <Card.Title>{city}</Card.Title>\n                <Card.Title>{temperature}</Card.Title>\n                <Card.Title>{high}</Card.Title>\n                <Card.Title>{low}</Card.Title>\n                <Card.Title>{feel}</Card.Title>\n              </Col>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}