{"ast":null,"code":"var _jsxFileName = \"/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\n\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n  const [weatherData, setWeatherData] = useState([{}]);\n  const [city, setCity] = useState(\"\");\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  });\n\n  const success = location => {\n    setLocation({\n      loaded: true,\n      lat: location.coords.latitude,\n      lng: location.coords.longitude\n    });\n    console.log(location);\n    fetch(`api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${apiKey}`).then(response => response.json()).then(data => setWeatherData(data));\n    console.log(weatherData);\n  };\n\n  const failed = error => {\n    setLocation({\n      loaded: true,\n      error\n    });\n    console.log(\"reached failure\");\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      failed({\n        code: 0,\n        message: \"Geolocation not supported\"\n      });\n    }\n  }, []); //   api.openweathermap.org/data/2.5/weather?lat={location.coords.latitude}&lon={lng}&appid={apiKey}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    s: 1,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"How's the weather?\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => navigator.geolocation.getCurrentPosition(success, failed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Check\")))))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/wasif/Documents/GitHub/portfolio/src/components/Weather.jsx"],"names":["React","useEffect","useState","Row","Col","Card","Button","FloatingLabel","Form","Weather","apiKey","weatherData","setWeatherData","city","setCity","location","setLocation","loaded","coordinates","lat","lng","success","coords","latitude","longitude","console","log","fetch","then","response","json","data","failed","error","navigator","code","message","geolocation","getCurrentPosition"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,aAAjC,EAAgDC,IAAhD,QAA4D,iBAA5D;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,MAAM,GAAG,kCAAf;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA9C;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACE,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC;AACrCe,IAAAA,MAAM,EAAE,KAD6B;AAErCC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,GAAG,EAAE;AAAhB;AAFwB,GAAD,CAAxC;;AAKA,QAAMC,OAAO,GAAGN,QAAQ,IAAI;AACxBC,IAAAA,WAAW,CAAC;AACRC,MAAAA,MAAM,EAAE,IADA;AAERE,MAAAA,GAAG,EAAEJ,QAAQ,CAACO,MAAT,CAAgBC,QAFb;AAEuBH,MAAAA,GAAG,EAAEL,QAAQ,CAACO,MAAT,CAAgBE;AAF5C,KAAD,CAAX;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEAY,IAAAA,KAAK,CAAE,6CAA4Cd,IAAK,yBAAwBH,MAAO,EAAlF,CAAL,CACSkB,IADT,CACeC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAD5B,EAESF,IAFT,CAEeG,IAAD,IAAUnB,cAAc,CAACmB,IAAD,CAFtC;AAGQN,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AAEX,GAXD;;AAaA,QAAMqB,MAAM,GAAGC,KAAK,IAAI;AACpBjB,IAAAA,WAAW,CAAC;AACRC,MAAAA,MAAM,EAAE,IADA;AAERgB,MAAAA;AAFQ,KAAD,CAAX;AAIAR,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,GAND;;AAQAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,EAAE,iBAAiBiC,SAAnB,CAAJ,EAAkC;AAC9BF,MAAAA,MAAM,CAAC;AACHG,QAAAA,IAAI,EAAE,CADH;AAEHC,QAAAA,OAAO,EAAE;AAFN,OAAD,CAAN;AAKC;AAER,GATQ,EASN,EATM,CAAT,CA9BkB,CAyCtB;;AAEE,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,CAAC,EAAE,CAAR;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMF,SAAS,CAACG,WAAV,CAAsBC,kBAAtB,CAAyCjB,OAAzC,EAAkDW,MAAlD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CADF,CADF,CADF,CADF,CADF,CADF;AAgBD,CA3DD;;AA6DA,eAAevB,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button, FloatingLabel, Form } from \"react-bootstrap\";\n\nconst Weather = () => {\n  const apiKey = \"86ddf68890ff862711c0fc76d79c9b6e\";\n  const [weatherData, setWeatherData] = useState([{}]);\n  const [city, setCity] = useState(\"\");\n    const [location, setLocation] = useState({\n        loaded: false,\n        coordinates: { lat: \"\", lng: \"\"}\n    })\n\n    const success = location => {\n        setLocation({ \n            loaded: true,\n            lat: location.coords.latitude, lng: location.coords.longitude})\n        console.log(location);\n\n        fetch(`api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${apiKey}`)\n                .then((response) => response.json())\n                .then((data) => setWeatherData(data));\n                console.log(weatherData);\n        \n    }\n\n    const failed = error => {\n        setLocation({\n            loaded: true,\n            error,\n        })\n        console.log(\"reached failure\");\n    }\n\n    useEffect(() => {\n        if (!(\"geolocation\" in navigator)){\n            failed({\n                code: 0,\n                message: \"Geolocation not supported\"\n            })\n                \n            }\n        \n    }, []);\n\n//   api.openweathermap.org/data/2.5/weather?lat={location.coords.latitude}&lon={lng}&appid={apiKey}\n\n  return (\n    <div>\n      <Row s={1} md={2}>\n        <Col>\n          <Card style={{}}>\n            <Card.Body>\n              <Col>\n                <Card.Title>How's the weather?</Card.Title>\n                <Button onClick={() => navigator.geolocation.getCurrentPosition(success, failed)}>Check</Button>\n              </Col>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}